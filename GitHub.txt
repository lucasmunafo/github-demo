massive scales
open source
developed for liunux projerct requeriments
most operations are local
very fast
acrive community
----------------------------------------
key concepts
•Repository contains all the files, histopry of changes, config managed by gift
•Thre local states of gift
	Working direcotry--->All the project files
	Staging area	--->Holing area that the project hadnt commit jet
	Commit - Git repository(history)--->all the changes
•Remote repository(GitHub)
•Master Branch
	branches contains commits
----------------------------------------
git clone http... =(para clonar el trabajo en el escritorio)
ls = para ver lo que hay adentro
git ls-files = Muestra todos los archivos trackeados por git
git status = nos brinda el status del projecto
		master branch: es por defoult por un repositorio
		el branch esta uptedeado
	este comando es para saber si en alguno lado se realizaron cambios
	cuando duce Untracked files significa que no ser agregaron a git el trabajo (Working 	Directory)
git add NombreDelArchivo.txt = pasael archivo al "staging area"
git commit -m "Adding start text file" = pasa el archivo al repository
git push origin master = origin se refiere al github copy de nuestro repositorio, master se refiere al 			master y unico branch
			Tira todo el proiyecto al GitHub

echo "contenido" >> NombreDelArchivo.txt	= para crear un nuevo archivo
cat NombreDelArchivo.txt = para ver el contenido del arcihvo

----------------------------------------
Empezando un proyecto - Basic Workflow - Hostory and aliases - Ignorando files no queridos-

git init NombreDelProyecto = para crear un nuevo proyecto (master)
!!!!!!!!mate NombreDelArchivo.txt = para crear un archivo

----------------------------------------

mkdir nombre = crea una carpeta nueva
rm -rf nombreDeLaCarpeta = elimina la carpeta
mv nobreViejo nombreNuevo = para cambiar el nombre de una carpeta

----------------------------------------

git init (dentro de la carpeta) = crea el git dentro de l capeta
git add . = pasa todos los archivos al stagin area
git add -A = agrega archivos que solo fieron movidos, renombrados o eliminados (update)
git reset HEAD NombreDelArchivo = regresa al satge anterior al archivo
git checkout -- nombreDelArchivo = para descartar los cambios hechos antes del commit

--Para add y commit al mismo tiempo
git commit -am "mensaje"

----------------------------------------
RENOMBRAR O MOVER

git mv nombreViejo.txt NombreNuevo.txt = cambia el nombre del archivo (si no se hcae con git lo borra y lo crea de nuevo)
git mv Archivo.txt Carpeta = mueve el archivo a la carpeta

----------------------------------------
ELIMINAR ARCHIVOS

rm Archivo.txt = elimina un archivo que no fue trackeado por git
git rm Archivo.tct = elimina un archivo trakeado por git

git checkout -- Archivo = restaura el archivo eliminado



----------------------------------------

MIRAR LA HISTORIA DE GIT

git log = Muestra la historia de commits.
git log --abbrev-comit = Muestra la historia con los codigos de commits mas resumido
git log --oneline --graph --decorate = Muestra los commits mas lindos
git log nroCommit...NroOtroCommit = muestra git entre rangos
git log --since="3 days ago" = Muestra hits hace 3 dias
git log -- Archivo.txt = mestra los commits de un cierto archivo
git log --follow -- folder/folder/archivo.txt = muestra a traves de los renombres
git show nroCompletoCommit = mestra de manera especifia lo que se hizo en ese commit

----------------------------------------
GIT IGNORE (exluir archivos no deseados)

npp(el editor de texto) .gitignore = adentro se esriben todos lo sarchivos que se quieren ignorar,
					para ignorar toda una carpeta escribir en este archivo Carpeta/

----------------------------------------

git pull origin master = trae de nuevo todo el repositorio
git push origin master = lleva todo el repositorio a gut hub

----------------------------------------
MODIFICACIONES A LOS ARCHIVOS
COMPARACIONES--------------------------

--DIFERENCIAS ENTRE TRABAJANDO Y ADD
git diff = muestra la diferencia entre los archivos que estan en el local working directori y lo que fue modificado recientemente
git difftool = mustra de manera grafica que se modifico en los archivos

-- DIFERENCIAS ENTRE TRABAJANDO Y COMMITED
git diff HEAD = muestra los archivos que estan siendo trabajados contra los archivos ya commiteados
git difftool HEAD = lo mismo que el anterior pero de manera grafica

--DIFERENCIAS ENTRE ADD Y COMMITED
git diff --staged HEAD
git difftool --staged HEAD


---PARA TODOS LOS CASOS SI SE QUIERE UN DIFF DE UN SOLO ARCHIVO EN ESPECIAL
git diff - Archivo


PARA VER DIFERENCIAS ENTRE COMMITS VIEJOS
git log --oneline (para ver los commits)
git diff nroCommit nroComit2 = Diferencias entre commits viejos
git difftool nroCommit nroComit2 = mismo pero grafico

git diff HEAD HEAD^ = el head menos uno (el mas nuevo a las iz y mas viejo derecha)


--DIFERENCIAS ENTRE EL COMMIT HEAD Y EL GITHUB (izquierda local derecha github)
git diff master origin/master
git difftool master origin/master


----------------------------------------

BRANCHES--
git branch -a = Ver los branches actuales
git branch NombreBranch = para crear un nuevo branch
git checkout NombreBranch = para cambiar de branch
git branch -m NombreViejo NombreNuevo = para cambiar el nombre del branch
git branch -d NombreBranch = para eliminar el branch
git branch -D NombreBranch = para eliminarlo de todos modos

--Para crear y moverse directo al branch
git checkout -b NombreBranch


--Para agregar los cambios del branch al master
git merge NombreBranch
git merge NombreBranch --no-ff = para ver el cambio de branch

--Para agreagar cambios a otro brench
git rebase NombreBrench = para guardar cambios de un branch a otro
git rebase --abort = para abortar el rebase
git rebase --continue = para continuar con el rebase
git pull --rebase origin master = para pullear los cambios del remote al branch 

--CUANDO HAY PROBLEMAS DE MERGING (MERGETOOL)
git mergetool = para resolver los problemas de merging

--Para ver las referencias entre el repo local y remoto(gitHub)
git fetch origin master


----------------------------------------
STASHING

--Crear Stash
git stash = hace a un lado los archivos que no se les hizo add y vuelve los cambios como si nada hubiese pasado
git stash -u = para hacerle stash a archivos nuevos y que estan en el ignore
git stash save "Descripcion" = guarda el stash con una descripcion
git stash show stash@{0} = para ver un stash en especifico


--Stash a un Branch
git stash branch Nombre = pasa directamente los archivos no add a un nuevo branch

--Volver Stash
git stash apply = para volver esos archivos
git stash apply stash@{1} = para apply a un stash en especial
git stash list =  muestra los archivos que se les hizo stash

--Eliminar Stash
git stash drop = elimina los archivos que se les hizo stash
git stash drop stash@{1} = mismo pero para uno
git stash clear = limpia toda la lista de stashes

--Apply y Drop
git stash pop = hace el apply y el drop (agrega y elimina)

----------------------------------------

git reflog = para ver todo lo que hice (el historial)
git reset HEAD^ = para volver atras a un commit
git reset NroCommit = va al commit que queres



----------------------------------------




----------------------------------------
GIT TAGGING

git tag myTag = etiqueta con ese nombre
git tag --list = muestra la lista de etiquetas
git tag -a nombreetiqueta = para hacer etiquetas con info
git tag -a nombreetiqueta NroComit = para ponerle una etiqueta a un commit viejo
git tag -a nombreetiqueta -f NroComit = para cambiar de commit el tag
git tag --delete nombreDeLaEtiqueta = para borrarla
git show nombreEtiqueta = muestra la etiqueta y su info


git push origin  master --tags = pushear los tags
git push origin :NombreTag = para sacar de GirHub un tag

----------------------------------------

git fetch origin otrobranch = va a descargar las referencias de lo que se modifico en ese branch

git cherry-pick NroCommit ??????
--PARA HELP
git help stash